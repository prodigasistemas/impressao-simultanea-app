package ui;import static util.Constantes.REGISTRO_TIPO_GERAL;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.util.List;import java.util.Vector;import model.Anormalidade;import util.Constantes;import util.GZIP;import util.LogUtil;import util.Util;import android.os.Environment;import android.util.Log;import business.ControladorRota;import com.IS.Fachada;@SuppressWarnings({ "rawtypes", "unchecked", "unused" })public class FileManager {	public static final int NAO_CRIAR = 1;	public static String INPUT_FILE_PATH;	public static final int CRIAR_SE_NAO_EXISTIR = 0;	public static final int APAGAR_E_CRIAR = 2;	public static final int APAGAR = 3;	private static FileManager instancia;	private static BufferedReader inputBuffer;	private static FileInputStream fInputStream;	private static File fileSelected;	private String pathDiretorioRotas;	private static Vector anormalidadesIndicadorUso1;	private static Vector anormalidadesSemIndicadorUso1;	private static int LEITURA_CONFIRMADA = 99;	private FileManager() {		try {			descobrirRootsDispositivo();		} catch (SecurityException se) {		}	}	public static FileManager getInstancia() {		if (instancia == null) {			instancia = new FileManager();		}		return instancia;	}	public static int getFileLineNumber(String fileName) throws IOException {		int numeroLinhas = Constantes.NULO_INT;		String line = "";		inputBuffer = null;		fileSelected = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + fileName);		if (fileSelected.canRead()) {			try {				if (fileName.endsWith(".txt")) {					fInputStream = new FileInputStream(fileSelected);					int tamanho = (int) fileSelected.length();					byte[] firstLine = new byte[100];					ByteArrayOutputStream baos = new ByteArrayOutputStream();					int nrb = fInputStream.read(firstLine, 0, 100);					baos.write(firstLine, 0, nrb);					firstLine = baos.toByteArray();					ByteArrayInputStream byteArray = new ByteArrayInputStream(firstLine);					InputStreamReader iSReader = new InputStreamReader(byteArray, "UTF-8");					inputBuffer = new BufferedReader(iSReader);					if ((line = inputBuffer.readLine()) != null) {						numeroLinhas = Integer.parseInt(line);					}					fInputStream.close();				} else {					readCompressedFile(fileName);					numeroLinhas = Integer.parseInt(inputBuffer.readLine());					fInputStream.close();				}			} catch (IOException e) {				e.printStackTrace();				LogUtil.salvarExceptionLog(e);			}		}		return numeroLinhas;	}		public static BufferedReader readAnyFile(String fileName) {		if (fileName.endsWith(".txt")) {			return readFile(fileName);		} else {			return readCompressedFile(fileName);		}	}		public static BufferedReader readFile(String fileName) {		inputBuffer = null;		fileSelected = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + fileName);		if (fileSelected.canRead()) {			try {				fInputStream = new FileInputStream(fileSelected);				InputStreamReader iSReader = new InputStreamReader(fInputStream, "UTF-8");				inputBuffer = new BufferedReader(iSReader);			} catch (IOException e) {				e.printStackTrace();				LogUtil.salvarExceptionLog(e);			}		}		return inputBuffer;	}	public static BufferedReader readCompressedFile(String fileName) {		inputBuffer = null;		fileSelected = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + fileName);		if (fileSelected.canRead()) {			try {				fInputStream = new FileInputStream(fileSelected);				byte[] arrayArquivoCompactado = new byte[(int) fileSelected.length()];				ByteArrayOutputStream baos = new ByteArrayOutputStream();				int nrb = fInputStream.read(arrayArquivoCompactado, 0, (int) fileSelected.length());				while (nrb != -1) {					baos.write(arrayArquivoCompactado, 0, nrb);					nrb = fInputStream.read(arrayArquivoCompactado, 0, (int) fileSelected.length());				}				arrayArquivoCompactado = baos.toByteArray();				arrayArquivoCompactado = GZIP.inflate(arrayArquivoCompactado);				ByteArrayInputStream byteArray = new ByteArrayInputStream(arrayArquivoCompactado);				InputStreamReader iSReader = new InputStreamReader(byteArray, "UTF-8");				inputBuffer = new BufferedReader(iSReader);			} catch (IOException e) {				e.printStackTrace();				LogUtil.salvarExceptionLog(e);			}		}		return inputBuffer;	}	public void descobrirRootsDispositivo() throws SecurityException {		String state = Environment.getExternalStorageState();		if (Environment.MEDIA_MOUNTED.equals(state)) {			File path = Util.getExternalStorageDirectory();			path.getAbsolutePath();			Log.i("ExternalStorage", "ExternalStorage :" + path.getAbsolutePath());			pathDiretorioRotas = path.getAbsolutePath() + Constantes.DIRETORIO_ROTAS;		} else {			pathDiretorioRotas = null;		}	}	/**	 * Retorna a anormalidade com o c√≥digo pesquisado	 */	public static Anormalidade getAnormalidade(int codigo) throws IOException {		Anormalidade anor = new Anormalidade();		anor.setCodigo("" + codigo);		Vector anormalidades = getAnormalidades(false);		int indice = anormalidades.indexOf(anor);		if (indice != -1) {			return (Anormalidade) anormalidades.elementAt(indice);		} else {			return null;		}	}	/**	 * Carrega as anormalidades direto do arquivo	 */	public static Vector getAnormalidades(boolean apenasComIndicadorUso1) {		Vector anormalidades = new Vector();		try {			if (ControladorRota.getInstancia().getDadosGerais().getCodigoEmpresaFebraban().equals(Constantes.CODIGO_FEBRABAN_COSANPA)) {				anormalidades = FileManager.getInstancia().carregarAnormalidades(apenasComIndicadorUso1);			}		} catch (IOException e) {			e.printStackTrace();			LogUtil.salvarExceptionLog(e);		}		return anormalidades;	}	/**	 * Carrega as anormalidades no controlador conta	 */	public Vector carregarAnormalidades(boolean apenasComIndicadorUso1) throws IOException {		if (apenasComIndicadorUso1 && anormalidadesIndicadorUso1 != null) {			return anormalidadesIndicadorUso1;		} else if (!apenasComIndicadorUso1 && anormalidadesSemIndicadorUso1 != null) {			return anormalidadesSemIndicadorUso1;		} else {			Vector anorm = null;			List anorms = ControladorRota.getInstancia().getDataManipulator().selectAnormalidades(apenasComIndicadorUso1);			if (anorms != null) {				List anormalidades = anorms;				Anormalidade[] anors = this.carregarVetorAnormalidades(anormalidades, apenasComIndicadorUso1);				anorm = new Vector();				for (int i = 0; i < anors.length; i++) {					anorm.addElement(anors[i]);				}				if (apenasComIndicadorUso1) {					anormalidadesIndicadorUso1 = anorm;				} else {					anormalidadesSemIndicadorUso1 = anorm;				}			}			return anorm;		}	}	/**	 * Carrega o array que mapeia o indice da anormalidade no identificador.	 */	public Anormalidade[] carregarVetorAnormalidades(List anormalidades, boolean apenasComIndicadorUso1) {		int len = anormalidades.size();		Anormalidade[] retorno = new Anormalidade[anormalidades.size() + 1];		Anormalidade anor = new Anormalidade();		anor.setCodigo("" + 00);		anor.setDescricao("");		anor.setIndicadorLeitura("" + 1);		anor.setIdConsumoACobrarComLeitura("" + 1);		anor.setIdConsumoACobrarSemLeitura("" + 0);		anor.setIdLeituraFaturarComLeitura("" + 1);		anor.setIdLeituraFaturarSemLeitura("" + 0);		anor.setIndcUso("" + Constantes.SIM);		anor.setNumeroFatorSemLeitura("" + Constantes.NULO_DOUBLE);		anor.setNumeroFatorComLeitura("" + Constantes.NULO_DOUBLE);		retorno[0] = anor;		int contador = 1;		for (int i = 1; i < len + 1; i++) {			Anormalidade reg14 = (Anormalidade) anormalidades.get(i - 1);			if (reg14.getCodigo() == LEITURA_CONFIRMADA) {				len = len - 1;				continue;			}			anor = new Anormalidade();			anor.setCodigo("" + reg14.getCodigo());			anor.setDescricao(reg14.getDescricao());			anor.setIndicadorLeitura("" + reg14.getIndicadorLeitura());			anor.setIdConsumoACobrarComLeitura("" + reg14.getIdConsumoACobrarComLeitura());			anor.setIdConsumoACobrarSemLeitura("" + reg14.getIdConsumoACobrarSemLeitura());			anor.setIdLeituraFaturarSemLeitura("" + reg14.getIdLeituraFaturarSemLeitura());			anor.setIdLeituraFaturarComLeitura("" + reg14.getIdLeituraFaturarComLeitura());			anor.setIndcUso("" + reg14.getIndcUso());			anor.setNumeroFatorSemLeitura("" + reg14.getNumeroFatorSemLeitura());			anor.setNumeroFatorComLeitura("" + reg14.getNumeroFatorComLeitura());			int uso = reg14.getIndcUso();			retorno[i] = anor;			if (uso != 2) {				contador++;			}		}		if (apenasComIndicadorUso1) {			Anormalidade[] retornoIndicadorUsoSim = new Anormalidade[contador];			contador = 0;			for (int i = 0; i < len + 1; i++) {				if (retorno[i].getIndcUso() == Constantes.SIM) {					retornoIndicadorUsoSim[contador] = retorno[i];					contador++;				}			}			return retornoIndicadorUsoSim;		} else {			return retorno;		}	}		public static boolean isVersaoCorreta(String nomeArquivo) {		boolean versaoCorreta = false;		BufferedReader input = FileManager.readAnyFile(nomeArquivo);		String linha = "";		StringBuilder arquivo = new StringBuilder();		try {			linha = input.readLine();			while ((linha = input.readLine()) != null) {				arquivo.append(linha);				int tipoRegistro = Integer.parseInt(linha.substring(0, 2));				if (tipoRegistro == REGISTRO_TIPO_GERAL) {					versaoCorreta = isVersaoISMaiorIgualGsan(ControladorRota.getInstancia().getDataManipulator().getNumeroVersao(linha));				}				arquivo.append("\n");			}		} catch (Exception e) {			e.printStackTrace();			LogUtil.salvarExceptionLog(e);		}		return versaoCorreta;	}		private static boolean isVersaoISMaiorIgualGsan(String versaoGsan) {		boolean resultado = false;		String versaoIS = Fachada.getAppVersion();		int comp = versaoIS.compareTo(versaoGsan.trim());		resultado = (comp >= 0 ? true : false);		return resultado;	}}